```{julia}
using MissingLinks, GeoDataFrames, Graphs, MetaGraphsNext
import TOML

CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
DATAAXLE_PATH = CONFIG["dataaxle_path"]
```

```{julia}
MissingLinks.get_example_data()
sidewalks = GeoDataFrames.read("example_data/Northlake.gpkg")
parcels = GeoDataFrames.read("example_data/Northlake_Parcels.gpkg")
destinations = GeoDataFrames.read("example_data/Northlake_Destinations.gpkg")
sidewalks.geom = MissingLinks.remove_elevation!.(sidewalks.geom)
```

```{julia}
graph = graph_from_gdal(sidewalks)
origin_weights = create_graph_weights(graph, parcels, [:units], 20)[:,1]
destinations.one .= 1
destination_weights = create_graph_weights(graph, destinations, [:one], 100)[:, 1]
sum(destination_weights) / sum(destinations.one)
matrix_file = open("quickstart_distances.bin", "w+")
matrix = Matrix{UInt16}(undef, nv(graph), nv(graph))
# this just makes sure the matrix is filled with 0s before we begin. This should not make any real difference as all values should be overwritten but is just a good practice.
fill!(matrix, 0)

fill_distance_matrix!(graph, matrix)

all_links = identify_potential_missing_links(graph, matrix, 100, 1000)

links = deduplicate_links(all_links, matrix, 100)
```

```{julia}
G2 = realize_graph(graph, links)
```

