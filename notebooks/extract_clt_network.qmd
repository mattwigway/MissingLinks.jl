# Extract CLT network

Extract the Charlotte network for use in external optimization programs.

```{julia}
using MissingLinks, GeoDataFrames, ArchGDAL, Mmap, DataFrames
import TOML, CSV
import Graphs: nv
import GeoFormatTypes as GFT

CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
DATAAXLE_PATH = CONFIG["dataaxle_path"]
```


## Read data

We currently have three data files we're working with: sidewalks, shared-use paths, and crosswalks.

```{julia}
# TODO clean up these paths
sidewalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "sidewalks_split_mwbc.gpkg"))
sidewalks.link_type .= "sidewalk"
paths = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "greenways_new_split.gpkg"))
paths.link_type .= "path"
paths = paths[.!ismissing.(paths.geom), :]
paths.geom = MissingLinks.remove_elevation!.(paths.geom)
crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "crosswalks_split_mwbc.gpkg"))
crosswalks.link_type .= "crosswalk"

# this contains links that go e.g. through parks where the greenway connects to a park but does not then
# connect directly to the rest of the sidewalk network, but we assume most pedestrians will be comfortable
# walking through the park.
addl_links = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "questionable_connections.gpkg"))
addl_links.link_type .= "questionable"

# there are some new crosswalks since the 2019 Mecklenburg imagery. Including all of them is not
# practical. However, ones that are identified as priority links are included in this file.
new_crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "new_crosswalks_since_2019_mwbc.gpkg"))
new_crosswalks.link_type .= "crosswalk"
```

The sidewalks layer has some curves, convert them to linestring

```{julia}
sidewalks.geom = ArchGDAL.lineargeom.(sidewalks.geom)
```

## Read destinations

```{julia}
parcels = GeoDataFrames.read(joinpath(DATA_PATH, "data", "parcels", "parcels_with_estimated_population.gpkg"));
# reproject state plane feet to meters
parcels.geom = reproject(parcels.geom, GFT.EPSG(2264), GFT.EPSG(32119));
parcels = parcels[.!ismissing.(parcels.est_pop), :]
metadata!(parcels, "geometrycolumns", (:geom,))

dest_blocks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "lodes", "tl_2022_37_tabblock20.shp"))
dest_blocks = dest_blocks[dest_blocks.COUNTYFP20 .== "119", :] # mecklenburg county
lodes = CSV.read(joinpath(DATA_PATH, "data", "lodes", "nc_wac_S000_JT00_2022.csv.gz"), DataFrame, types=Dict("w_geocode"=>String))
leftjoin!(dest_blocks, lodes, on="GEOID20"=>"w_geocode")
dest_blocks = dest_blocks[.!ismissing.(dest_blocks.C000), :]
dest_blocks.geometry = reproject(dest_blocks.geometry, GFT.EPSG(4269), GFT.EPSG(32119), order=:trad)
```

## Convert to noded

```{julia}
noded = semi_to_fully_noded(sidewalks, crosswalks, new_crosswalks, paths, addl_links; snap_tolerance=3, split_tolerance=0.5)
```

## Build network

This builds a MetaGraphsNext network from the dataset.

```{julia}
G = graph_from_gdal(noded)
```

Now, we add short edges (<3.5 m) to connect the graph in places where there are small gaps due to data errors.

```{julia}
add_short_edges!(G, 3.5)
```

```{julia}
G = remove_tiny_islands(G, 10)
```

## Identify links

```{julia}
dfile = open("distances_1k.bin", "w+")
matrix = Mmap.mmap(dfile, Matrix{UInt16}, (nv(G), nv(G)); grow=true)
```

Do the routing. Since we're not scoring links, we only have to route up to 1000m (the cutoff used to determine if a link should exist).

```{julia}
MissingLinks.fill_distance_matrix!(G, matrix; maxdist=1000)
```

Find candidate missing links (places where network distance >> geographic distance)

```{julia}
all_candidate_links = identify_potential_missing_links(G, matrix, 100, 1000)
```

Deduplicate similar links

```{julia}
# was 2777 in paper but 2778 here, why? something weird with edge effects in distance matrix?
candidate_links = deduplicate_links(all_candidate_links, matrix, 100)
```

```{julia}
close(dfile)
```

## Realize the network

```{julia}
realized_graph = realize_graph(G, candidate_links)
nv(realized_graph)
```

```{julia}
MissingLinks.collapse_realized_graph!(realized_graph)
nv(realized_graph)
```

## Get the weights

We just re-calculate the weights for the simplified graph, rather than trying to simplify the weights from the original graph.

```{julia}
origin_weights = create_graph_weights(realized_graph, parcels, [:est_pop], 20)[:, 1]
dest_weights = create_graph_weights(realized_graph, dest_blocks, [:C000], 20)[:, 1]
```


## Write output

### GIS output

```{julia}
graph_to_gis(joinpath(DATA_PATH, "Charlotte_RNDP", "charlotte_ped_net_edges.gpkg"), realized_graph, crs=GFT.EPSG(32119))
```

```{julia}
g_nodes = MissingLinks.nodes_to_gis(realized_graph)
g_nodes.dest_weight = dest_weights
g_nodes.origin_weight = origin_weights
metadata!(g_nodes, "geometrycolumns", (:geom,))
GeoDataFrames.write(joinpath(DATA_PATH, "Charlotte_RNDP", "charlotte_ped_net_nodes.gpkg"), g_nodes, crs=GFT.EPSG(32119), layer_name="nodes")
```


### TNTP output

```{julia}
MissingLinks.write_tntp(joinpath(DATA_PATH, "Charlotte_RNDP", "charlotte_ped_net.tntp"), realized_graph)
```

```{julia}
g4326 = reproject(g_nodes.geom, GFT.EPSG(32119), GFT.EPSG(4326), order=:trad)
g_nodes.lon = ArchGDAL.getx.(g4326, 0)
g_nodes.lat = ArchGDAL.gety.(g4326, 0)

CSV.write(
    joinpath(DATA_PATH, "Charlotte_RNDP", "charlotte_ped_net_nodes.tntp"),
    rename(g_nodes[!, [:index, :lon, :lat, :origin_weight, :dest_weight]], "index"=>"~index"),
    delim='\t',
    newline="\t;\n"
)
```