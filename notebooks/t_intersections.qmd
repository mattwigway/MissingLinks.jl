---
name: T Intersection Crosswalks
---

This notebook finds all T intersections that currently only have one crosswalk across the T leg and no crosswalks on the through leg. We initially had coded crosswalks this way, but determined that this was undesirable as it created places that were disconnected when in reality it is safe/reasonable to cross.


```{julia}
using DataFrames, GeoDataFrames, MissingLinks, ArchGDAL, DataFramesMeta, Graphs, MetaGraphsNext
import GeoFormatTypes as GFT
import TOML
CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
DATAAXLE_PATH = CONFIG["dataaxle_path"]
const DIST_THRESHOLD_M = 15.0
```

```{julia}
streets = @chain begin
    GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "charlotte_streets_mwbc.gpkg"))
    @subset :NUMBEROFLA .â‰¤ 2 .&& ArchGDAL.geomlength(:geom) .> 0.01
end
```

```{julia}
G = graph_from_gdal(streets; max_edge_length=50_000)
add_short_edges!(G, 0.1)
```

Find three way intersections

```{julia}
threeway = DataFrame(:geom=>[ArchGDAL.createpoint(collect(G[label_for(G, v)])) for v in vertices(G) if degree(G, v) == 3])
```


```{julia}
threeway.xwalkcount .= 0
```


Count nearby crosswalks

```{julia}
crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "charlotte_crosswalks_split_mwbc.gpkg"))
```

```{julia}
# This is kinda slow, could use spatial index but only need to run it once so doesn't matter
for (i, geom) in enumerate(crosswalks.geom)
    if i % 100 == 0
        @info "$i / $(nrow(crosswalks)) crosswalks processed"
    end

    # if this is slow, could use spatial index
    for (intix, intgeom) in zip(copy(eachindex(threeway.xwalkcount)), copy(threeway.geom))
        if ArchGDAL.distance(intgeom, geom) < DIST_THRESHOLD_M
            threeway.xwalkcount[intix] += 1
        end
    end
end
```

```{julia}
sum(threeway.xwalkcount .== 1)

tocheck = threeway[threeway.xwalkcount .== 1, :]
metadata!(tocheck, "geometrycolumns", (:geom,))

GeoDataFrames.write(joinpath(DATA_PATH, "data", "three_way_intersections.gpkg"), tocheck; crs=GFT.EPSG(32119))
```