---
title: Create parcel-level population estimation
author: Matt Bhagat-Conway
---

```{r}
library(tidyverse)
library(sf)
library(RcppTOML)
library(tidycensus)

config = parseTOML(here::here("config.toml"))
```

## Grab 2020 Census block-level data

Note: block population is not one of the differential privacy "invariants," so some blocks may have incorrect population totals.

```{r}
census = get_decennial(
    state="NC",
    county="Mecklenburg",
    geography="block",
    year=2020,
    variables=c(
        "origin_weight"="P1_001N" # total population
    ),
    output="wide",
    keep_geo_vars=T,
    geometry=T
)
```

## Read parcel data

```{r}
parcels = read_sf(file.path(config$data_path, "data", "parcels", "Parcel_LandUse.shp")) %>%
        mutate(
            landuse_s=case_match(txt_Land_1,
                c("SINGLE FAMILY RESIDENTIAL", "SINGLE FAMILY RESIDENTIAL - ACREAGE",
                    "SINGLE FAMILY RESIDENTIAL - GOLF",  "SINGLE FAMILY RESIDENTIAL - RIVER", "SINGLE FAMILY RESIDENTIAL - WATER VIEW",  
                    "SINGLE FAMILY RESIDENTIAL - WATERFRONT",  "SINGLE FAMILY RESIDENTIAL GATED COMMUNITY", "SINGLE FAMILY RESIDENTIAL MINI FARM/ESTATE",
                    "R101", "RESIDENTIAL AFFORDABLE HOUSING") ~ "Detached_single_family",
                c("TOWN HOUSE  GOLF COURSE FRONTAGE", "TOWN HOUSE  SFR" , "TOWN HOUSE  WATER ACCESS" , 
                    "TOWN HOUSE  WATER FRONTAGE" , "TOWNHOUSE AFFORDABLE HOUSING",
                    "PATIO HOME", "PATIO HOME - WATERFRONT") ~ "Attached_single_family",
                c("MOBILE HOME HS", "MOBILE HOME PARK", "MOBILE HOME SUBDIVISION") ~ "Mobile_home", 
                c("MULTI FAMILTY AFFORDABLE HOUSING", "MULTI FAMILY",
                "MULTI FAMILY DUPLEX/TRIPLEX", "MULTI FAMILY GARDEN", "MULTI FAMILY HIGH RISE",
                "MULTI FAMILY TOWNHOUSE", "MULTI FAMILY WATER ACCESS",
                "CONDO AFFORDABLE HOUSING", 
                "CONDOMINIUM","CONDOMINIUM HIGH RISE", 
                "CONDOMINIUM WATER FRONTAGE", "CONDOMINIUM WATER VIEW") ~ "Multi_family"
        )
    ) %>%
    filter(!is.na(landuse_s))
pcentroid = st_centroid(parcels)
pcentroid = st_transform(pcentroid, 4269)
```

## Spatial join

```{r}
parcels_with_census = st_join(pcentroid, census, st_within)
```

## Create features

```{r}
regdata = parcels_with_census %>%
    mutate() %>%
    group_by(GEOID, landuse_s) %>%
    summarize(
        count = n(),
        origin_weight=first(origin_weight),
        area_ac = sum(Acres)
    ) %>%
    ungroup() %>%
    pivot_wider(names_from="landuse_s", values_from=c("count", "area_ac")) %>%
    select(matches("origin_weight|count_|area_ac_")) %>%
    mutate(across(matches("count_|area_ac_"), \(x) replace_na(x, 0))) %>%
    st_drop_geometry()
```


## Run model

```{r}
model = lm(origin_weight~count_Detached_single_family+area_ac_Attached_single_family+area_ac_Mobile_home+area_ac_Multi_family-1, regdata)
summary(model)
```

## Attach estimates to parcels

```{r}
parcels_with_census = parcels_with_census %>%
    mutate(est_pop=case_match(
        landuse_s,
        "Detached_single_family" ~ coefficients(model)[["count_Detached_single_family"]],
        "Attached_single_family" ~ coefficients(model)[["area_ac_Attached_single_family"]] * Acres,
        "Mobile_home" ~ coefficients(model)[["area_ac_Mobile_home"]] * Acres,
        "Multi_family" ~ coefficients(model)[["area_ac_Multi_family"]] * Acres
    ))
```

## Scale estimates to match block populations

This is just intended to disaggregate block-level estimates from the Census.

```{r}
parcels_with_census = parcels_with_census %>%
    group_by(GEOID) %>%
    mutate(scaled_est_pop = est_pop * first(origin_weight) / sum(est_pop))
```

```{r}
# the really high ones are big high rises in mostly non-residential blocks, which seem to also
# often have very low reported acreages
ggplot(parcels_with_census, aes(x=scaled_est_pop / est_pop)) +
    geom_histogram()
```

## Attach to original parcel geometries

```{r}
parcels = parcels_with_census %>%
    ungroup() %>%
    st_drop_geometry() %>%
    select(pid, scaled_est_pop) %>%
    right_join(parcels, by="pid") %>%
    rename(origin_weight="scaled_est_pop")
```

## Sanity check

```{r}
parcels_with_census %>%
    group_by(GEOID) %>%
    summarize(disag_pop=sum(scaled_est_pop), act_pop=first(origin_weight)) %>%
    # a few NAs due to boundary effects
    with(stopifnot(all(is.na(GEOID) | abs(disag_pop - act_pop) < 0.1)))

stopifnot(sum(is.na(parcels_with_census$GEOID)) == 16)
```

## Save output

```{r}
write_sf(parcels, file.path(config$data_path, "data", "parcels", "parcels_with_estimated_population.gpkg"))
```