---
title: Create parcel-level population estimation
author: Matt Bhagat-Conway
---

```{r}
library(tidyverse)
library(sf)
library(RcppTOML)
library(tidycensus)

config = parseTOML(here::here("config.toml"))
```

## Grab 2020 Census block-level data

Note: block population is not one of the differential privacy "invariants," so some blocks may have incorrect population totals.

```{r}
census = get_decennial(
    state="NC",
    county="Mecklenburg",
    geography="block",
    year=2020,
    variables=c(
        "origin_weight"="P1_001N" # total population
    ),
    output="wide",
    keep_geo_vars=T,
    geometry=T
)
```

## Read parcel data

```{r}
parcels = read_sf(file.path(config$data_path, "data", "parcels", "Parcel_TaxData.shp"))
```

Filter to just residential.

It seems that when there is a large condo complex, they do not have a parcel that represents the common areas separately from the individual units; when there is a condo or townhome complex there are almost never records with more than zero units.

## Spatial join

```{r}
parcels_with_census = parcels %>%
    filter((descproper %in% c("Single-Family", "Condo/Townhome", "Multi-Family", "Manufactured") | descbuildi=="DORMITORY") & units > 0 & !is.na(units)) %>%
    mutate(original_area_ac=as.double(st_area(.)) / (660 * 66)) %>%
    st_intersection(st_transform(census, st_crs(parcels))) %>%
    mutate(
        area_ac = as.double(st_area(.)) / (660 * 66),
        # when properties cross block boundaries, allocate units between blocks based on
        # area
        est_units = units * area_ac / original_area_ac
    )
```


## Disaggregate by unit counts

```{r}
parcels_with_census = parcels_with_census %>%
    group_by(GEOID) %>%
    mutate(est_pop=origin_weight * est_units / sum(est_units)) %>%
    ungroup()
```

### Sanity checks

How many people are assigned to each unit?

```{r}
ppu = parcels_with_census %>%
    group_by(GEOID) %>%
    summarize(persons_per_unit=sum(est_pop) / sum(est_units), est_pop=sum(est_pop))
    
ppu %>% 
    ggplot(aes(x=pmin(persons_per_unit, 10))) +
        geom_histogram()

```

## Do counts total to what we expect?

```{r}
parcels_with_census %>%
    group_by(GEOID) %>%
    summarize(
        expected = first(origin_weight),
        observed = sum(est_pop)
    ) %>%
    filter(!is.na(observed)) %>%
    with(stopifnot(all.equal(expected, observed)))
```

## Save output

```{r}
write_sf(parcels_with_census, file.path(config$data_path, "data", "parcels", "parcels_with_estimated_population.gpkg"))
```