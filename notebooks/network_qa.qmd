---
title: Network QA
---

```{julia}
using GeoDataFrames, DataFrames, MissingLinks, Graphs, Mmap, ArchGDAL,
    MetaGraphsNext
import TOML
import GDAL
import GeoFormatTypes as GFT
import Dates: now
CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
DATAAXLE_PATH = CONFIG["dataaxle_path"]
```

## Read data

We currently have three data files we're working with: sidewalks, shared-use paths, and crosswalks.

```{julia}
# work around https://github.com/yeesian/ArchGDAL.jl/issues/333
function flattento2d_chtype!(geom)
    # keep geom in scope so it doesn't get destroyed before we're ready
    # atm this shouldn't happen as flattento2d! returns its argument, but if #333 is fixed
    # we don't want to rely on implementation details.
    new_geom = ArchGDAL.flattento2d!(geom)
    return ArchGDAL.IGeometry(GDAL.ogr_g_clone(new_geom.ptr))
end
```

```{julia}
# TODO clean up these paths
sidewalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "sidewalks_split_mwbc.gpkg"))
paths = GeoDataFrames.read(joinpath(DATA_PATH, "data", "Greenways.shp"))
rename!(paths, :geometry => :geom)
paths.geom = flattento2d_chtype!.(reproject(paths.geom, GFT.EPSG(2264), GFT.EPSG(32119)))
crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "charlotte_crosswalks_copy_split.gpkg"))

# there are some new crosswalks since the 2019 Mecklenburg imagery. Including all of them is not
# practical. However, ones that are identified as priority links are included in this file.
new_crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "new_crosswalks_since_2019_mwbc.gpkg"))
rename!(new_crosswalks, :geometry => :geom)
```

The sidewalks layer has some curves, convert them to linestring

```{julia}
sidewalks.geom = ArchGDAL.lineargeom.(sidewalks.geom)
```

## Convert to noded

```{julia}
noded = semi_to_fully_noded(sidewalks, crosswalks, new_crosswalks, paths; snap_tolerance=3, split_tolerance=0.5)
```

## Build network

This builds a MetaGraphsNext network from the dataset.

```{julia}
G = graph_from_gdal(noded)
```

Now, we add short edges (<3.5 m) to connect the graph in places where there are small gaps due to data errors.

```{julia}
add_short_edges!(G, 3.5)
```

We don't do island removal here in case some islands should really be connected.

```{julia}
dfile = open("distances_qa.bin", "w+")
matrix = Mmap.mmap(dfile, Matrix{UInt16}, (nv(G), nv(G)); grow=true)
```

Do the routing

```{julia}
MissingLinks.fill_matrix!(G, matrix)
```

```{julia}
dead_ends = MissingLinks.find_dead_ends(G)
```

```{julia}
disconnected_crossings = MissingLinks.find_disconnected_crossings(G, matrix)
```

```{julia}
GeoDataFrames.write(joinpath(DATA_PATH, "data", "network", "dead_ends.gpkg"), dead_ends, crs=GFT.EPSG(32119))
GeoDataFrames.write(joinpath(DATA_PATH, "data", "network", "disconnected_crossings.gpkg"), disconnected_crossings, crs=GFT.EPSG(32119))
```