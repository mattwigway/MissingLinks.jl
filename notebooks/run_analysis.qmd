---
title: Build graph
author: Matt Bhagat-Conway
---

```{julia}
using GeoDataFrames, DataFrames, MissingLinks, Graphs, Mmap, ArchGDAL,
    MetaGraphsNext, CSV, Gadfly, StatsBase
import Humanize: digitsep
import Cairo, Fontconfig # gadfly -> png
import TOML
import GeoFormatTypes as GFT
import Dates: now
CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
```

## Read data

We currently have three data files we're working with: sidewalks, shared-use paths, and crosswalks.

```{julia}
# TODO clean up these paths
sidewalks = GeoDataFrames.read(joinpath(DATA_PATH, "RA", "Data", "charlotte_sidewalks.gpkg"))
paths = GeoDataFrames.read(joinpath(DATA_PATH, "RA", "Data", "charlotte_shared_use_paths.gpkg"))
crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "charlotte_crosswalks.shp"))

# there are some new crosswalks since the 2019 Mecklenburg imagery. Including all of them is not
# practical. However, ones that are identified as priority links are included in this file.
new_crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "new_crosswalks_since_2019.gpkg"))
rename!(crosswalks, :geometry=>:geom)
rename!(new_crosswalks, :geometry=>:geom)

```

The sidewalks layer has some curves, convert them to linestring

```{julia}
sidewalks.geom = ArchGDAL.lineargeom.(sidewalks.geom)
```

## Convert to noded

```{julia}
noded = semi_to_fully_noded(sidewalks, crosswalks, new_crosswalks, paths; snap_tolerance=3, split_tolerance=0.5)
```

## Build network

This builds a MetaGraphsNext network from the dataset.

```{julia}
G = graph_from_gdal(noded)
```

Now, we add short edges (<3.5 m) to connect the graph in places where there are small gaps due to data errors.

```{julia}
add_short_edges!(G, 3.5)
```

```{julia}
G = remove_tiny_islands(G, 10)
```

```{julia}
MissingLinks.graph_to_graphml(joinpath(DATA_PATH, "data", "graph.graphml"), G, pretty=true)
```


## Create origin and destination weights

```{julia}
parcels = GeoDataFrames.read(joinpath(DATA_PATH, "data", "parcels", "Parcel_LandUse.shp"));
# reproject state plane feet to meters
parcels.geometry = reproject(parcels.geometry, GFT.EPSG(2264), GFT.EPSG(32119));
```

```{julia}
# write out the land use codes to a file
df = DataFrame("land_use" => unique(parcels.txt_Land_1))
df.origins_per_parcel .= missing
df.origins_per_acre .= missing
df.destinations_per_parcel .= missing
df.destinations_per_acre .= missing
CSV.write(joinpath(DATA_PATH, "data", "parcels", "land_use_weights_template.csv"), df)
```

```{julia}
land_use_codes = CSV.read(joinpath(DATA_PATH, "data", "parcels", "land_use_weights.csv"), DataFrame)
parcels = parcels[.!ismissing.(parcels.txt_Land_1), :]
land_use_codes = land_use_codes[.!ismissing.(land_use_codes.land_use), :]
leftjoin!(parcels, land_use_codes, on=:txt_Land_1=>:land_use)
```

```{julia}
parcels.origin_weight = coalesce.(
    passmissing(convert).(Float64, parcels.origins_per_parcel),
    parcels.origins_per_acre .* parcels.Acres,
    0.0
)
```

```{julia}
parcels.destination_weight = coalesce.(
    passmissing(convert).(Float64, parcels.destinations_per_parcel),
    parcels.destinations_per_acre .* parcels.Acres,
    0.0
)
```

```{julia}
weights = create_graph_weights(G, parcels, [:origin_weight, :destination_weight], 20)
```

## Run the core algorithm

```{julia}
algorithm_start = now()
dfile = open("distances.bin", "w+")
matrix = Mmap.mmap(dfile, Matrix{UInt16}, (nv(G), nv(G)); grow=true)
fill!(matrix, zero(UInt16));
```

Do the routing

```{julia}
MissingLinks.fill_matrix!(G, matrix)
```

Find candidate missing links (places where network distance >> geographic distance)

```{julia}
all_candidate_links = identify_potential_missing_links(G, matrix, 100, 1000)
```

Deduplicate similar links (~5min)

```{julia}
candidate_links = deduplicate_links(all_candidate_links, matrix, 100)
```


## Score the links

```{julia}
scores = score_links(x -> x < 1609 * 2, candidate_links, matrix, weights[:, 1], weights[:, 2], 1609 * 2)
```

## Timing

```{julia}
runtime = now() - algorithm_start
println("Algorithm took $runtime")
```

### Score histogram

```{julia}
p = plot(
    DataFrame(:score=>scores),
    x=:score,
    Geom.histogram(bincount=50),
    Guide.xlabel("Aggregate accessibility impact"),
    Guide.ylabel("Number of links"),
    Scale.x_continuous(labels=x -> digitsep(round(Int64, x))))

draw(PNG(joinpath(DATA_PATH, "paper", "figures", "scores.png"), dpi=300), p)

p
```

```{julia}
median(scores)
```

```{julia}
mean(scores)
```

```{julia}
links_gis = links_to_gdf(G, candidate_links, scores)
GeoDataFrames.write(joinpath(DATA_PATH, "data", "candidate_missing_links.gpkg"), links_gis; crs=GFT.EPSG(32119));
```

```{julia}
close(dfile)
```

## Street crossings

Most candidate links appear to be street crossings rather than new links between suburban streets. This is probably because of where the destinations are (along streets that are hard to cross). Here we calculate what percentage of links and access-weighted links cross streets