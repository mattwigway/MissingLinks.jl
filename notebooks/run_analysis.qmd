---
title: Build graph
author: Matt Bhagat-Conway
---

```{julia}
using GeoDataFrames, DataFrames, MissingLinks, Graphs, Mmap, ArchGDAL,
    MetaGraphsNext, CSV, Gadfly, StatsBase, DataFramesMeta
import Humanize: digitsep
import Cairo, Fontconfig, GDAL
import TOML
import GeoFormatTypes as GFT
import Dates: now
CONFIG = TOML.parsefile(joinpath(dirname(@__FILE__), "..", "config.toml"))
DATA_PATH = CONFIG["data_path"]
DATAAXLE_PATH = CONFIG["dataaxle_path"]

MAX_DIST_M::Int64 = 5250
```

## Read data

We currently have three data files we're working with: sidewalks, shared-use paths, and crosswalks.
∏
```{julia}
# work around https://github.com/yeesian/ArchGDAL.jl/issues/333
function flattento2d_chtype!(geom)
    # keep geom in scope so it doesn't get destroyed before we're ready
    # atm this shouldn't happen as flattento2d! returns its argument, but if #333 is fixed
    # we don't want to rely on implementation details.
    new_geom = ArchGDAL.flattento2d!(geom)
    return ArchGDAL.IGeometry(GDAL.ogr_g_clone(new_geom.ptr))
end
```

```{julia}
# TODO clean up these paths
sidewalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "sidewalks_split_mwbc.gpkg"))
sidewalks.link_type .= "sidewalk"
paths = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "greenways_new_split.gpkg"))
paths.link_type .= "path"
paths = paths[.!ismissing.(paths.geom), :]
paths.geom = flattento2d_chtype!.(paths.geom)
crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "crosswalks_split_mwbc.gpkg"))
crosswalks.link_type .= "crosswalk"

# this contains links that go e.g. through parks where the greenway connects to a park but does not then
# connect directly to the rest of the sidewalk network, but we assume most pedestrians will be comfortable
# walking through the park.
addl_links = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "questionable_connections.gpkg"))
addl_links.link_type .= "questionable"

# there are some new crosswalks since the 2019 Mecklenburg imagery. Including all of them is not
# practical. However, ones that are identified as priority links are included in this file.
new_crosswalks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "network", "new_crosswalks_since_2019_mwbc.gpkg"))
new_crosswalks.link_type .= "crosswalk"
```

The sidewalks layer has some curves, convert them to linestring

```{julia}
sidewalks.geom = ArchGDAL.lineargeom.(sidewalks.geom)
```

## Convert to noded

```{julia}
noded = semi_to_fully_noded(sidewalks, crosswalks, new_crosswalks, paths, addl_links; snap_tolerance=3, split_tolerance=0.5)
```

## Build network

This builds a MetaGraphsNext network from the dataset.

```{julia}
G = graph_from_gdal(noded)
```

Now, we add short edges (<3.5 m) to connect the graph in places where there are small gaps due to data errors.

```{julia}
add_short_edges!(G, 3.5)
```

```{julia}
G = remove_tiny_islands(G, 10)
```

```{julia}
MissingLinks.graph_to_graphml(joinpath(DATA_PATH, "data", "graph.graphml"), G, pretty=true)
MissingLinks.graph_to_gis(joinpath(DATA_PATH, "data", "graph.gpkg"), G, crs=GFT.EPSG(32119))
```


## Create origin and destination weights

```{julia}
parcels = GeoDataFrames.read(joinpath(DATA_PATH, "data", "parcels", "parcels_with_estimated_population.gpkg"));
# reproject state plane feet to meters
parcels.geom = reproject(parcels.geom, GFT.EPSG(2264), GFT.EPSG(32119));
parcels = parcels[.!ismissing.(parcels.est_pop), :]
metadata!(parcels, "geometrycolumns", (:geom,))
```

```{julia}
origin_weights = create_graph_weights(G, parcels, [:est_pop], 20)[:, 1]
```

Destinations are a little trickier because they're split across multiple files. We have a parcels file that has destinations snapped to parcels (for destinations that are likely to be in the middle of parcels), point features (for bus stops), and area features (neighborhood and regional parks).

```{julia}
dest_parcels = GeoDataFrames.read(joinpath(DATA_PATH, "data", "destinations", "weighted_parcels.gpkg"))

# already in EPSG:32119

dest_weights_snapped = create_graph_weights(G, dest_parcels, [:dest_weight], 20)[:, 1]

# What percent of weight successfully snapped? Expected to be less than one because not all parcels have sidewalk access
sum(dest_weights_snapped) / sum(dest_parcels.dest_weight)
```

```{julia}
dest_points_unsnapped = @chain begin
    GeoDataFrames.read(joinpath(DATAAXLE_PATH, "all_point_locations.gpkg"))
    @subset! .!:snap_to_parcels
end

dest_points_unsnapped.geom = reproject(dest_points_unsnapped.geom, GFT.EPSG(4326), GFT.EPSG(32119), order=:trad)

metadata!(dest_points_unsnapped, "geometrycolumns", (:geom,))

dest_weights_unsnapped = create_graph_weights(G, dest_points_unsnapped, [:weight], 20)[:, 1]

sum(dest_weights_unsnapped) / sum(dest_points_unsnapped.weight)
```

```{julia}
nbhd_parks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "destinations", "neighborhood_parks.gpkg"))
regional_parks = GeoDataFrames.read(joinpath(DATA_PATH, "data", "destinations", "neighborhood_parks.gpkg"))
nbhd_parks.weight .= 2.0
regional_parks.weight .= 2.0
parks = vcat(nbhd_parks, regional_parks)
parks.geom = reproject(parks.geom, GFT.EPSG(2264), GFT.EPSG(32119))
metadata!(parks, "geometrycolumns", (:geom,))
dest_weights_parks = create_graph_weights(G, parks, [:weight], 20)[:, 1]

sum(dest_weights_parks) / sum(parks.weight)
```


Greenways have points placed along them. We use a much lower snapping tolerance since the points are placed using our source data directly.

```{julia}
greenway_points = GeoDataFrames.read(joinpath(DATA_PATH, "data", "destinations", "greenway_points.gpkg"))
dest_weights_greenway = create_graph_weights(G, greenway_points, [:weight], 1)

# should be very close to 1
sum(dest_weights_greenway) / sum(greenway_points.weight)
```

```{julia}
dest_weights = dest_weights_snapped .+ dest_weights_unsnapped .+ dest_weights_parks .+ dest_weights_greenway
```

## Run the core algorithm

```{julia}
algorithm_start = now()
dfile = open("distances.bin", "w+")
matrix = Mmap.mmap(dfile, Matrix{UInt16}, (nv(G), nv(G)); grow=true)
```

Do the routing

```{julia}
MissingLinks.fill_matrix!(G, matrix; maxdist=MAX_DIST_M)
```

Find candidate missing links (places where network distance >> geographic distance)

```{julia}
all_candidate_links = identify_potential_missing_links(G, matrix, 100, 1000)
```

Deduplicate similar links (~5min)

```{julia}
candidate_links = deduplicate_links(all_candidate_links, matrix, 100)
```


## Score the links

```{julia}
scores = score_links(x -> x < 1609 * 2, candidate_links, matrix, origin_weights, dest_weights, 1609 * 2)
```

## Timing

```{julia}
runtime = now() - algorithm_start
println("Algorithm took $runtime")
```

### Score histogram

```{julia}
p = plot(
    DataFrame(:score=>scores),
    x=:score,
    Geom.histogram(bincount=50),
    Guide.xlabel("Aggregate accessibility impact"),
    Guide.ylabel("Number of links"),
    Scale.x_continuous(labels=x -> digitsep(round(Int64, x))))

draw(PNG(joinpath(DATA_PATH, "paper", "figures", "scores.png"), dpi=300), p)

p
```

```{julia}
median(scores)
```

```{julia}
mean(scores)
```


## Investigate how a different cutoff changes results

### Different cutoffs

```{julia}
@time scores_1mi = score_links(x -> x < 1609, candidate_links, matrix, origin_weights, dest_weights, 1609)
@time scores_3mi = score_links(x -> x < 1609 * 3, candidate_links, matrix, origin_weights, dest_weights, 1609 * 3)
```

### Gravity function

```{julia}
const β = open(x -> read(x, Float64), joinpath(DATA_PATH, "beta.float64"))
```

```{julia}
decayfunc(x) = x > MAX_DIST_M ? 0.0 : exp(β*x)
@time scores_negexp = score_links(decayfunc, candidate_links, matrix, origin_weights, dest_weights, 5250)
```

```{julia}
links_gis = links_to_gdf(G, candidate_links)
links_gis.score_1mi = scores_1mi
links_gis.score_2mi = scores
links_gis.score_3mi = scores_3mi
links_gis.score_negexp = scores_negexp
links_gis.rank_1mi = competerank(scores_1mi, rev=true)
links_gis.rank_2mi = competerank(scores, rev=true)
links_gis.rank_3mi = competerank(scores_3mi, rev=true)
links_gis.rank_negexp = competerank(scores_negexp, rev=true)

GeoDataFrames.write(joinpath(DATA_PATH, "data", "candidate_missing_links.gpkg"), links_gis; crs=GFT.EPSG(32119));

# Note: link at 443397.71, 166211.30 has zero length reported but 0.26m in GIS. I assume this is because we round the offsets.
```

```{julia}
links_gis = links_to_gdf(G, all_candidate_links)
GeoDataFrames.write(joinpath(DATA_PATH, "data", "all_candidate_missing_links.gpkg"), links_gis; crs=GFT.EPSG(32119));
```


## Service area example (for NCAMPO slides)

Generate some service areas to better explain the algorithm.

```{julia}
edge_index = MissingLinks.index_graph_edges(G)
```

```{julia}
sources = [
    (name="North", geom=ArchGDAL.createpoint(444316.0,156853.7), link=1660),
    (name="South", geom=ArchGDAL.createpoint(444000.5,156368.8), link=1660),
]

service_areas = DataFrame(Iterators.flatmap(sources) do source
        [
            (
                name=source.name,
                which="Before",
                service_area(
                    source.geom,
                    G,
                    matrix,
                    1609 * 2,
                    scores=dest_weights,
                    edge_index=edge_index
                )...
            ),
            (
                name=source.name,
                which="After",
                service_area(
                    source.geom,
                    G,
                    matrix,
                    1609 * 2,
                    scores=dest_weights,
                    edge_index=edge_index,
                    links=[candidate_links[source.link]]
                )...
            )
        ]
    end
)

metadata!(service_areas, "geometrycolumns", (:geom,))

sources = DataFrame(sources)
metadata!(sources, "geometrycolumns", (:geom,))

GeoDataFrames.write(joinpath(DATA_PATH, "paper", "figures", "service_area_origins.gpkg"), sources, crs=GFT.EPSG(32119))
GeoDataFrames.write(joinpath(DATA_PATH, "paper", "figures", "service_areas.gpkg"), service_areas, crs=GFT.EPSG(32119))
```

```{julia}
close(dfile)
```


```{julia}

```

