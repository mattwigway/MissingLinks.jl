---
title: Medical facilities
---

We extract medical facilities from the [Data.gov Medicare Providers list. This is done in Julia so we can use the [Postal.jl](https://github.com/mattwigway/Postal.jl) library for deduplicating addresses

```{julia}
using Postal, DataFrames, GeoDataFrames, TOML, CSV, DataFramesMeta

config = TOML.parsefile(joinpath(@__DIR__, "..", "config.toml"))
setup_libpostal(config["libpostal_data_path"])
```

```{julia}
data = @chain begin
    CSV.read(joinpath(config["data_path"], "data", "destinations", "MUP_PHY_R23_P05_V10_D21_Prov.csv"), DataFrame)
    @subset! :Rndrng_Prvdr_State_Abrvtn .== "NC" .&& lowercase.(:Rndrng_Prvdr_City) .== "charlotte"
end
```

Now, load up hospital data for deduplication.

## Remove providers at hospitals

Some providers are at hospitals, which are accounted separately. Remove providers with the same street address as hospitals.

```{julia}
hospitals = @chain begin
    GeoDataFrames.read(joinpath(config["data_path"], "data", "destinations", "nchospitals.gpkg"))
    @subset! :Site_City .== "Charlotte" # TODO should filter to Charlotte in destinations as well
end

hospital_addresses = [(name=n, address=parse_address(a)) for (n, a) in zip(hospitals.DBA_Name,hospitals.Site_Address)]
```

```{julia}
DUPLICATES = [
    Postal.DuplicateStatus.ExactDuplicate,
    Postal.DuplicateStatus.LikelyDuplicate,
    Postal.DuplicateStatus.PossibleDuplicateNeedsReview
]

data.hospital = map(zip(data.Rndrng_Prvdr_St1, data.Rndrng_Prvdr_St2)) do addrs
    pfailed = true
    for addr in addrs
        if !ismissing(addr)
            paddr = parse_address(addr)
            if haskey(paddr, "house_number") && haskey(paddr, "road")
                pfailed = false

                for (hname, haddr) in hospital_addresses
                    if Postal.is_house_number_duplicate(paddr["house_number"], haddr["house_number"]) ∈ DUPLICATES &&
                        Postal.is_street_duplicate(paddr["road"], haddr["road"]) ∈ DUPLICATES

                        return hname
                    end
                end
            end
        end
    end

    pfailed && error("parse failed: $addrs")

    return missing
end

```


```{julia}
CSV.write(joinpath(config["data_path"], "data", "destinations", "medical_providers_non_hospital.csv"), data[ismissing.(data.hospital) .&& data.Rndrng_Prvdr_Type .≠ "Hospitalist", :])
```