---
title: Assemble parcel weights
---

Most of our destination data is assigned to parcels. We do this because we want to link to nearby streets, and some destinations on large parcels might be quite far from streets. However, we don't want to link to streets faraway from destinations on small parcels. Therefore, we assign weights to each parcel, and hten snap those parcels to streets.

We do not do this for parks (already polygon features), bus stops and transit centers (presumably already close to the road), or the CBD (manually coded to be close to the road).

```{r}
library(tidyverse)
library(sf)
library(readxl)
library(RcppTOML)

config = parseTOML(here::here("config.toml"))

HIGH_PRIORITY=3
MEDIUM_PRIORITY=2
```

## Read data

Read in all of the data files we've created for different destination types, and get them in a consistent format.

### High priority locations

```{r}
downtown = read_sf(file.path(config$data_path, "data", "destinations", "charlotte_cbd.gpkg")) %>%
    mutate(name="Uptown Charlotte", type="Downtown/CBD", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=F)
```

```{r}
food = read_sf(file.path(config$data_path, "data", "destinations", "healthy_food.gpkg")) %>%
    mutate(type="Healthy food option", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T)
```

```{r}
# TODO compare against Irene's list
hospitals = read_sf(file.path(config$data_path, "data", "destinations", "nchospitals.gpkg")) %>%
    filter(Site_City == "Charlotte") %>%
    st_transform(4326) %>%
    select(DBA_Name) %>%
    rename(name="DBA_Name") %>%
    mutate(type="Hospital", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T)
```

```{r}
major_emp = read_sf(file.path(config$dataaxle_path, "mecklenburg_large_employers.gpkg")) %>%
    select(COMPANY) %>%
    mutate(name=str_to_title(COMPANY), type="Major employment", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T) %>%
    select(name, weight, priority, type, snap_to_parcels)
```

```{r}
park_ride = read_sf(file.path(config$data_path, "data", "destinations", "CATS_Park_and_Ride_Lots.shp")) %>%
    st_transform(4326) %>%
    rename(name="Name") %>%
    select(name) %>%
    mutate(type="Park and ride", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T)
```

```{r}
schools = read_sf(file.path(config$data_path, "data", "destinations", "Schools_(points).shp")) %>%
    st_transform(4326) %>%
    rename(name="Name") %>%
    select(name) %>%
    mutate(type="School", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T) %>%
    filter(!st_is_empty(geometry)) # three schools have empty geometries. I think they are programs colocated with another school.
```

```{r}
sports_ent = read_xlsx(file.path(config$data_path, "data", "destinations", "Significant Sports & Entertainment.xlsx")) %>%
    st_as_sf(coords=c("Long", "Lat"), crs=4326) %>%
    rename(name="Name") %>%
    mutate(type="Sports and entertainment", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T)
```

```{r}
transit_center = read_sf(file.path(config$data_path, "data", "destinations", "transit_centers.gpkg")) %>%
    mutate(name="Transit center", type="Transit center", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=F) %>%
    st_transform(4326)
```

```{r}
uni = read_sf(file.path(config$data_path, "data", "destinations", "colleges.gpkg")) %>%
    st_transform(4326) %>%
    rename(name="NAME") %>%
    select(name) %>%
    mutate(type="College/university", priority="High", weight=HIGH_PRIORITY, snap_to_parcels=T)
```

### Medium priority locations

```{r}
bus_stops = read_sf(file.path(config$data_path, "data", "destinations", "Bus_Stops_With_Frequency_HLT.shp")) %>%
    st_transform(4326) %>%
    rename(name="StopDesc") %>%
    select(name) %>%
    mutate(type="Bus stop", priority="Medium", weight=MEDIUM_PRIORITY, snap_to_parcels=F)
```

```{r}
lr_stops = read_sf(file.path(config$data_path, "data", "destinations", "lr_stops.gpkg")) %>%
    rename(name="Stop_Name") %>%
    st_transform(4326) %>%
    mutate(type="Light Rail Stop", priority="Medium", weight=MEDIUM_PRIORITY, snap_to_parcels=F)

```

```{r}
hotels = read_sf(file.path(config$dataaxle_path, "mecklenburg_hotels.gpkg")) %>%
    mutate(name=str_to_title(COMPANY), weight=MEDIUM_PRIORITY, snap_to_parcels=T, priority="Medium", type="Hotel") %>%
    select(name, weight, priority, type, snap_to_parcels)
```

```{r}
# TODO compare against Irene's list
libraries = read_sf(file.path(config$data_path, "data", "destinations", "Libraries.shp")) %>%
    st_transform(4326) %>%
    rename(name="Name") %>%
    select(name) %>%
    mutate(type="Library", priority="Medium", weight=MEDIUM_PRIORITY, snap_to_parcels=T)
```

```{r}
medical = read_sf(file.path(config$data_path, "data", "destinations", "medical_providers_non_hospital.gpkg")) %>%
    select(c()) %>%
    st_transform(4326) %>%
    # /5 to correct b/c we have providers and want facilities/buildings
    mutate(name="Medical provider", type="Medical provider", priority="Medium", weight=MEDIUM_PRIORITY/5, snap_to_parcels=T)
```

```{r}
# note that church is a misnomer; it's actually all religious organizations
religious = read_sf(file.path(config$dataaxle_path, "mecklenburg_church.gpkg")) %>%
    mutate(name=str_to_title(COMPANY), weight=MEDIUM_PRIORITY, snap_to_parcels=T, priority="Medium", type="Religious/Civic") %>%
    select(name, weight, priority, type, snap_to_parcels)
```

```{r}
civic = read_sf(file.path(config$data_path, "data", "destinations", "recreation_community_centers.gpkg")) %>%
    rename(name="Name") %>%
    mutate(type="Religious/Civic", priority="Medium", weight=MEDIUM_PRIORITY, snap_to_parcels=T) %>%
    select(name, weight, priority, type)
```

```{r}
retail = read_sf(file.path(config$dataaxle_path, "mecklenburg_retail.gpkg")) %>%
    # /5 to convert retail points to retail centers, roughly
    mutate(name=str_to_title(COMPANY), weight=MEDIUM_PRIORITY / 5, snap_to_parcels=T, priority="Medium", type="Retail") %>%
    select(name, weight, priority, type)
```


## Put it all together

```{r}
fix_geom_name = function (sfobj) {
    if ("geom" %in% names(sfobj)) {
        return(rename(sfobj, geometry="geom"))
    } else if ("SHAPE" %in% names(sfobj)) {
        return(rename(sfobj, geometry="SHAPE"))
    } else {
       return(sfobj)
    }
}

point_locations = bind_rows(
    fix_geom_name(downtown),
    fix_geom_name(food),
    fix_geom_name(hospitals),
    fix_geom_name(major_emp),
    fix_geom_name(park_ride),
    fix_geom_name(schools),
    fix_geom_name(sports_ent),
    fix_geom_name(transit_center),
    fix_geom_name(uni),
    fix_geom_name(bus_stops),
    fix_geom_name(lr_stops),
    fix_geom_name(hotels),
    fix_geom_name(libraries),
    fix_geom_name(medical),
    fix_geom_name(religious),
    fix_geom_name(civic),
    fix_geom_name(retail)
)

point_locations$dest_id = 1:nrow(point_locations)
```

```{r}
write_sf(point_locations, file.path(config$dataaxle_path, "all_point_locations.gpkg"))
```

## Snap to parcels

```{r}
parcels = read_sf(file.path(config$data_path, "data", "parcels", "Parcel_LandUse.shp")) %>%
    st_transform(32119)
```

```{r}
snap_pts = filter(point_locations, snap_to_parcels) %>%
    st_transform(32119)

snap_pts$nearest = st_nearest_feature(snap_pts, parcels)

snap_pts$nearest_dist = st_distance(snap_pts, parcels$geometry[snap_pts$nearest], by_element=T)

mean(snap_pts$nearest_dist < units::as_units(100, "m"))
```

## Visualize ones that failed to snap

These are all just outside Mecklenburg County, visualized in GIS to confirm.

```{r}
snap_pts %>%
    filter(nearest_dist >= units::as_units(100, "m")) %>%
    write_sf(file.path(config$data_path, "data", "destinations", "snap_failures.gpkg"))
```

```{r}
parcel_weights = snap_pts %>%
    filter(nearest_dist < units::as_units(100, "m")) %>%
    st_drop_geometry() %>%
    group_by(nearest) %>%
    summarize(weight=sum(weight))

parcels$weight = 0
parcels$weight[parcel_weights$nearest] = parcel_weights$weight

weighted_parcels = filter(parcels, weight > 0) %>%
    rename(dest_weight="weight")

write_sf(weighted_parcels, file.path(config$data_path, "data", "destinations", "weighted_parcels.gpkg"))
```

```{r}
```